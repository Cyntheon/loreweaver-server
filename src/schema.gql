# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuditLogEntry {
  createdAt: DateTime!
  data: JSON!
  id: UUID!
}

type AuditLogEntryCountAggregate {
  _all: Int!
  createdAt: Int!
  data: Int!
  id: Int!
}

input AuditLogEntryCreateInput {
  data: JSON!
}

type AuditLogEntryMaxAggregate {
  createdAt: DateTime
  id: UUID
}

type AuditLogEntryMinAggregate {
  createdAt: DateTime
  id: UUID
}

enum AuditLogEntryOrderByRelevanceFieldEnum {
  id
}

input AuditLogEntryOrderByRelevanceInput {
  fields: [AuditLogEntryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input AuditLogEntryOrderByWithRelationAndSearchRelevanceInput {
  _relevance: AuditLogEntryOrderByRelevanceInput
  createdAt: SortOrder
  data: SortOrder
  id: SortOrder
}

enum AuditLogEntryScalarFieldEnum {
  createdAt
  data
  id
}

input AuditLogEntryUpdateInput {
  data: JSON
}

input AuditLogEntryWhereInput {
  AND: [AuditLogEntryWhereInput!]
  NOT: [AuditLogEntryWhereInput!]
  OR: [AuditLogEntryWhereInput!]
  createdAt: DateTimeFilter
  data: JsonFilter
  id: UuidFilter
}

input AuditLogEntryWhereUniqueInput {
  id: UUID
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Collection {
  _count: CollectionCount!
  author: User!
  authorId: UUID!
  contentTargetList: [ContentTarget!]
  createdAt: DateTime!
  followTarget: FollowTarget!
  followTargetId: UUID!
  id: UUID!
  shortcode: Shortcode
  shortcodeId: String
  slug: String!
  slugDuplicateCount: Int!
  title: String!
  updatedAt: DateTime!
}

input CollectionAuthorIdSlugSlugDuplicateCountCompoundUniqueInput {
  authorId: UUID!
  slug: String!
  slugDuplicateCount: Int!
}

type CollectionCount {
  contentTargetList: Int!
}

input CollectionCreateManyAuthorInput {
  followTargetId: UUID!
  shortcodeId: String
  title: String!
}

input CollectionCreateManyAuthorInputEnvelope {
  data: [CollectionCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CollectionCreateNestedManyWithoutAuthorInput {
  connect: [CollectionWhereUniqueInput!]
  connectOrCreate: [CollectionCreateOrConnectWithoutAuthorInput!]
  create: [CollectionCreateWithoutAuthorInput!]
  createMany: CollectionCreateManyAuthorInputEnvelope
}

input CollectionCreateNestedManyWithoutContentTargetListInput {
  connect: [CollectionWhereUniqueInput!]
  connectOrCreate: [CollectionCreateOrConnectWithoutContentTargetListInput!]
  create: [CollectionCreateWithoutContentTargetListInput!]
}

input CollectionCreateNestedOneWithoutFollowTargetInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutFollowTargetInput
  create: CollectionCreateWithoutFollowTargetInput
}

input CollectionCreateNestedOneWithoutShortcodeInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutShortcodeInput
  create: CollectionCreateWithoutShortcodeInput
}

input CollectionCreateOrConnectWithoutAuthorInput {
  create: CollectionCreateWithoutAuthorInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateOrConnectWithoutContentTargetListInput {
  create: CollectionCreateWithoutContentTargetListInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateOrConnectWithoutFollowTargetInput {
  create: CollectionCreateWithoutFollowTargetInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateOrConnectWithoutShortcodeInput {
  create: CollectionCreateWithoutShortcodeInput!
  where: CollectionWhereUniqueInput!
}

input CollectionCreateWithoutAuthorInput {
  contentTargetList: ContentTargetCreateNestedManyWithoutCollectionsInput
  shortcode: ShortcodeCreateNestedOneWithoutCollectionInput
  title: String!
}

input CollectionCreateWithoutContentTargetListInput {
  author: UserCreateNestedOneWithoutCollectionsInput!
  shortcode: ShortcodeCreateNestedOneWithoutCollectionInput
  title: String!
}

input CollectionCreateWithoutFollowTargetInput {
  author: UserCreateNestedOneWithoutCollectionsInput!
  contentTargetList: ContentTargetCreateNestedManyWithoutCollectionsInput
  shortcode: ShortcodeCreateNestedOneWithoutCollectionInput
  title: String!
}

input CollectionCreateWithoutShortcodeInput {
  author: UserCreateNestedOneWithoutCollectionsInput!
  contentTargetList: ContentTargetCreateNestedManyWithoutCollectionsInput
  title: String!
}

input CollectionListRelationFilter {
  every: CollectionWhereInput
  none: CollectionWhereInput
  some: CollectionWhereInput
}

input CollectionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CollectionOrderByRelevanceFieldEnum {
  authorId
  followTargetId
  id
  shortcodeId
  slug
  title
}

input CollectionOrderByRelevanceInput {
  fields: [CollectionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CollectionOrderByWithRelationAndSearchRelevanceInput {
  _relevance: CollectionOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  contentTargetList: ContentTargetOrderByRelationAggregateInput
  createdAt: SortOrder
  followTarget: FollowTargetOrderByWithRelationAndSearchRelevanceInput
  followTargetId: SortOrder
  id: SortOrder
  shortcode: ShortcodeOrderByWithRelationAndSearchRelevanceInput
  shortcodeId: SortOrderInput
  slug: SortOrder
  slugDuplicateCount: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input CollectionRelationFilter {
  is: CollectionWhereInput
  isNot: CollectionWhereInput
}

input CollectionScalarWhereInput {
  AND: [CollectionScalarWhereInput!]
  NOT: [CollectionScalarWhereInput!]
  OR: [CollectionScalarWhereInput!]
  authorId: UuidFilter
  createdAt: DateTimeFilter
  followTargetId: UuidFilter
  id: UuidFilter
  shortcodeId: StringNullableFilter
  slug: StringFilter
  slugDuplicateCount: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input CollectionUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
}

input CollectionUpdateManyWithWhereWithoutAuthorInput {
  data: CollectionUpdateManyMutationInput!
  where: CollectionScalarWhereInput!
}

input CollectionUpdateManyWithWhereWithoutContentTargetListInput {
  data: CollectionUpdateManyMutationInput!
  where: CollectionScalarWhereInput!
}

input CollectionUpdateManyWithoutAuthorNestedInput {
  connect: [CollectionWhereUniqueInput!]
  connectOrCreate: [CollectionCreateOrConnectWithoutAuthorInput!]
  create: [CollectionCreateWithoutAuthorInput!]
  createMany: CollectionCreateManyAuthorInputEnvelope
  delete: [CollectionWhereUniqueInput!]
  deleteMany: [CollectionScalarWhereInput!]
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  update: [CollectionUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CollectionUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CollectionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CollectionUpdateManyWithoutContentTargetListNestedInput {
  connect: [CollectionWhereUniqueInput!]
  connectOrCreate: [CollectionCreateOrConnectWithoutContentTargetListInput!]
  create: [CollectionCreateWithoutContentTargetListInput!]
  delete: [CollectionWhereUniqueInput!]
  deleteMany: [CollectionScalarWhereInput!]
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  update: [CollectionUpdateWithWhereUniqueWithoutContentTargetListInput!]
  updateMany: [CollectionUpdateManyWithWhereWithoutContentTargetListInput!]
  upsert: [CollectionUpsertWithWhereUniqueWithoutContentTargetListInput!]
}

input CollectionUpdateOneWithoutFollowTargetNestedInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutFollowTargetInput
  create: CollectionCreateWithoutFollowTargetInput
  delete: Boolean
  disconnect: Boolean
  update: CollectionUpdateWithoutFollowTargetInput
  upsert: CollectionUpsertWithoutFollowTargetInput
}

input CollectionUpdateOneWithoutShortcodeNestedInput {
  connect: CollectionWhereUniqueInput
  connectOrCreate: CollectionCreateOrConnectWithoutShortcodeInput
  create: CollectionCreateWithoutShortcodeInput
  delete: Boolean
  disconnect: Boolean
  update: CollectionUpdateWithoutShortcodeInput
  upsert: CollectionUpsertWithoutShortcodeInput
}

input CollectionUpdateWithWhereUniqueWithoutAuthorInput {
  data: CollectionUpdateWithoutAuthorInput!
  where: CollectionWhereUniqueInput!
}

input CollectionUpdateWithWhereUniqueWithoutContentTargetListInput {
  data: CollectionUpdateWithoutContentTargetListInput!
  where: CollectionWhereUniqueInput!
}

input CollectionUpdateWithoutAuthorInput {
  contentTargetList: ContentTargetUpdateManyWithoutCollectionsNestedInput
  shortcode: ShortcodeUpdateOneWithoutCollectionNestedInput
  title: StringFieldUpdateOperationsInput
}

input CollectionUpdateWithoutContentTargetListInput {
  author: UserUpdateOneRequiredWithoutCollectionsNestedInput
  shortcode: ShortcodeUpdateOneWithoutCollectionNestedInput
  title: StringFieldUpdateOperationsInput
}

input CollectionUpdateWithoutFollowTargetInput {
  author: UserUpdateOneRequiredWithoutCollectionsNestedInput
  contentTargetList: ContentTargetUpdateManyWithoutCollectionsNestedInput
  shortcode: ShortcodeUpdateOneWithoutCollectionNestedInput
  title: StringFieldUpdateOperationsInput
}

input CollectionUpdateWithoutShortcodeInput {
  author: UserUpdateOneRequiredWithoutCollectionsNestedInput
  contentTargetList: ContentTargetUpdateManyWithoutCollectionsNestedInput
  title: StringFieldUpdateOperationsInput
}

input CollectionUpsertWithWhereUniqueWithoutAuthorInput {
  create: CollectionCreateWithoutAuthorInput!
  update: CollectionUpdateWithoutAuthorInput!
  where: CollectionWhereUniqueInput!
}

input CollectionUpsertWithWhereUniqueWithoutContentTargetListInput {
  create: CollectionCreateWithoutContentTargetListInput!
  update: CollectionUpdateWithoutContentTargetListInput!
  where: CollectionWhereUniqueInput!
}

input CollectionUpsertWithoutFollowTargetInput {
  create: CollectionCreateWithoutFollowTargetInput!
  update: CollectionUpdateWithoutFollowTargetInput!
}

input CollectionUpsertWithoutShortcodeInput {
  create: CollectionCreateWithoutShortcodeInput!
  update: CollectionUpdateWithoutShortcodeInput!
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  author: UserRelationFilter
  authorId: UuidFilter
  contentTargetList: ContentTargetListRelationFilter
  createdAt: DateTimeFilter
  followTarget: FollowTargetRelationFilter
  followTargetId: UuidFilter
  id: UuidFilter
  shortcode: ShortcodeRelationFilter
  shortcodeId: StringNullableFilter
  slug: StringFilter
  slugDuplicateCount: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input CollectionWhereUniqueInput {
  authorId_slug_slugDuplicateCount: CollectionAuthorIdSlugSlugDuplicateCountCompoundUniqueInput
  followTargetId: UUID
  id: UUID
  shortcodeId: String
}

type Comment {
  _count: CommentCount!
  author: User!
  authorId: UUID!
  children: [Comment!]
  contentTarget: ContentTarget!
  contentTargetId: UUID!
  contents: JSON!
  createdAt: DateTime!
  id: UUID!
  parentComment: Comment
  parentCommentId: UUID
  parentPost: Post!
  parentPostId: UUID!
  shortcode: Shortcode
  shortcodeId: String
  updatedAt: DateTime!
}

type CommentCount {
  children: Int!
}

input CommentCreateManyAuthorInput {
  contentTargetId: UUID!
  contents: JSON!
  parentCommentId: UUID
  parentPostId: UUID!
  shortcodeId: String
}

input CommentCreateManyAuthorInputEnvelope {
  data: [CommentCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyParentCommentInput {
  authorId: UUID!
  contentTargetId: UUID!
  contents: JSON!
  parentPostId: UUID!
  shortcodeId: String
}

input CommentCreateManyParentCommentInputEnvelope {
  data: [CommentCreateManyParentCommentInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyParentPostInput {
  authorId: UUID!
  contentTargetId: UUID!
  contents: JSON!
  parentCommentId: UUID
  shortcodeId: String
}

input CommentCreateManyParentPostInputEnvelope {
  data: [CommentCreateManyParentPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
}

input CommentCreateNestedManyWithoutParentCommentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
  createMany: CommentCreateManyParentCommentInputEnvelope
}

input CommentCreateNestedManyWithoutParentPostInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentPostInput!]
  create: [CommentCreateWithoutParentPostInput!]
  createMany: CommentCreateManyParentPostInputEnvelope
}

input CommentCreateNestedOneWithoutChildrenInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutChildrenInput
  create: CommentCreateWithoutChildrenInput
}

input CommentCreateNestedOneWithoutContentTargetInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutContentTargetInput
  create: CommentCreateWithoutContentTargetInput
}

input CommentCreateNestedOneWithoutShortcodeInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutShortcodeInput
  create: CommentCreateWithoutShortcodeInput
}

input CommentCreateOrConnectWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutChildrenInput {
  create: CommentCreateWithoutChildrenInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutContentTargetInput {
  create: CommentCreateWithoutContentTargetInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentPostInput {
  create: CommentCreateWithoutParentPostInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutShortcodeInput {
  create: CommentCreateWithoutShortcodeInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutAuthorInput {
  children: CommentCreateNestedManyWithoutParentCommentInput
  contents: JSON!
  parentComment: CommentCreateNestedOneWithoutChildrenInput
  parentPost: PostCreateNestedOneWithoutChildrenInput!
  shortcode: ShortcodeCreateNestedOneWithoutCommentInput
}

input CommentCreateWithoutChildrenInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  contents: JSON!
  parentComment: CommentCreateNestedOneWithoutChildrenInput
  parentPost: PostCreateNestedOneWithoutChildrenInput!
  shortcode: ShortcodeCreateNestedOneWithoutCommentInput
}

input CommentCreateWithoutContentTargetInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  children: CommentCreateNestedManyWithoutParentCommentInput
  contents: JSON!
  parentComment: CommentCreateNestedOneWithoutChildrenInput
  parentPost: PostCreateNestedOneWithoutChildrenInput!
  shortcode: ShortcodeCreateNestedOneWithoutCommentInput
}

input CommentCreateWithoutParentCommentInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  children: CommentCreateNestedManyWithoutParentCommentInput
  contents: JSON!
  parentPost: PostCreateNestedOneWithoutChildrenInput!
  shortcode: ShortcodeCreateNestedOneWithoutCommentInput
}

input CommentCreateWithoutParentPostInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  children: CommentCreateNestedManyWithoutParentCommentInput
  contents: JSON!
  parentComment: CommentCreateNestedOneWithoutChildrenInput
  shortcode: ShortcodeCreateNestedOneWithoutCommentInput
}

input CommentCreateWithoutShortcodeInput {
  author: UserCreateNestedOneWithoutCommentsInput!
  children: CommentCreateNestedManyWithoutParentCommentInput
  contents: JSON!
  parentComment: CommentCreateNestedOneWithoutChildrenInput
  parentPost: PostCreateNestedOneWithoutChildrenInput!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CommentOrderByRelevanceFieldEnum {
  authorId
  contentTargetId
  id
  parentCommentId
  parentPostId
  shortcodeId
}

input CommentOrderByRelevanceInput {
  fields: [CommentOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CommentOrderByWithRelationAndSearchRelevanceInput {
  _relevance: CommentOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  children: CommentOrderByRelationAggregateInput
  contentTarget: ContentTargetOrderByWithRelationAndSearchRelevanceInput
  contentTargetId: SortOrder
  contents: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parentComment: CommentOrderByWithRelationAndSearchRelevanceInput
  parentCommentId: SortOrderInput
  parentPost: PostOrderByWithRelationAndSearchRelevanceInput
  parentPostId: SortOrder
  shortcode: ShortcodeOrderByWithRelationAndSearchRelevanceInput
  shortcodeId: SortOrderInput
  updatedAt: SortOrder
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  authorId: UuidFilter
  contentTargetId: UuidFilter
  contents: JsonFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  parentCommentId: UuidNullableFilter
  parentPostId: UuidFilter
  shortcodeId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateManyMutationInput {
  contents: JSON
}

input CommentUpdateManyWithWhereWithoutAuthorInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentCommentInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentPostInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutAuthorNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutAuthorInput!]
  create: [CommentCreateWithoutAuthorInput!]
  createMany: CommentCreateManyAuthorInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutParentCommentNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentCommentInput!]
  create: [CommentCreateWithoutParentCommentInput!]
  createMany: CommentCreateManyParentCommentInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentCommentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentCommentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentCommentInput!]
}

input CommentUpdateManyWithoutParentPostNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentPostInput!]
  create: [CommentCreateWithoutParentPostInput!]
  createMany: CommentCreateManyParentPostInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentPostInput!]
}

input CommentUpdateOneWithoutChildrenNestedInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutChildrenInput
  create: CommentCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutChildrenInput
  upsert: CommentUpsertWithoutChildrenInput
}

input CommentUpdateOneWithoutContentTargetNestedInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutContentTargetInput
  create: CommentCreateWithoutContentTargetInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutContentTargetInput
  upsert: CommentUpsertWithoutContentTargetInput
}

input CommentUpdateOneWithoutShortcodeNestedInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutShortcodeInput
  create: CommentCreateWithoutShortcodeInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutShortcodeInput
  upsert: CommentUpsertWithoutShortcodeInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentCommentInput {
  data: CommentUpdateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentPostInput {
  data: CommentUpdateWithoutParentPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutAuthorInput {
  children: CommentUpdateManyWithoutParentCommentNestedInput
  contents: JSON
  parentComment: CommentUpdateOneWithoutChildrenNestedInput
  parentPost: PostUpdateOneRequiredWithoutChildrenNestedInput
  shortcode: ShortcodeUpdateOneWithoutCommentNestedInput
}

input CommentUpdateWithoutChildrenInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  contents: JSON
  parentComment: CommentUpdateOneWithoutChildrenNestedInput
  parentPost: PostUpdateOneRequiredWithoutChildrenNestedInput
  shortcode: ShortcodeUpdateOneWithoutCommentNestedInput
}

input CommentUpdateWithoutContentTargetInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  children: CommentUpdateManyWithoutParentCommentNestedInput
  contents: JSON
  parentComment: CommentUpdateOneWithoutChildrenNestedInput
  parentPost: PostUpdateOneRequiredWithoutChildrenNestedInput
  shortcode: ShortcodeUpdateOneWithoutCommentNestedInput
}

input CommentUpdateWithoutParentCommentInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  children: CommentUpdateManyWithoutParentCommentNestedInput
  contents: JSON
  parentPost: PostUpdateOneRequiredWithoutChildrenNestedInput
  shortcode: ShortcodeUpdateOneWithoutCommentNestedInput
}

input CommentUpdateWithoutParentPostInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  children: CommentUpdateManyWithoutParentCommentNestedInput
  contents: JSON
  parentComment: CommentUpdateOneWithoutChildrenNestedInput
  shortcode: ShortcodeUpdateOneWithoutCommentNestedInput
}

input CommentUpdateWithoutShortcodeInput {
  author: UserUpdateOneRequiredWithoutCommentsNestedInput
  children: CommentUpdateManyWithoutParentCommentNestedInput
  contents: JSON
  parentComment: CommentUpdateOneWithoutChildrenNestedInput
  parentPost: PostUpdateOneRequiredWithoutChildrenNestedInput
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentCommentInput {
  create: CommentCreateWithoutParentCommentInput!
  update: CommentUpdateWithoutParentCommentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentPostInput {
  create: CommentCreateWithoutParentPostInput!
  update: CommentUpdateWithoutParentPostInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutChildrenInput {
  create: CommentCreateWithoutChildrenInput!
  update: CommentUpdateWithoutChildrenInput!
}

input CommentUpsertWithoutContentTargetInput {
  create: CommentCreateWithoutContentTargetInput!
  update: CommentUpdateWithoutContentTargetInput!
}

input CommentUpsertWithoutShortcodeInput {
  create: CommentCreateWithoutShortcodeInput!
  update: CommentUpdateWithoutShortcodeInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  author: UserRelationFilter
  authorId: UuidFilter
  children: CommentListRelationFilter
  contentTarget: ContentTargetRelationFilter
  contentTargetId: UuidFilter
  contents: JsonFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  parentComment: CommentRelationFilter
  parentCommentId: UuidNullableFilter
  parentPost: PostRelationFilter
  parentPostId: UuidFilter
  shortcode: ShortcodeRelationFilter
  shortcodeId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  contentTargetId: UUID
  id: UUID
  shortcodeId: String
}

type ContentTarget {
  _count: ContentTargetCount!
  collections: [Collection!]
  comment: Comment
  createdAt: DateTime!
  id: UUID!
  likes: [Like!]
  lore: Lore
  post: Post
  type: ContentTargetType!
  updatedAt: DateTime!
}

type ContentTargetCount {
  collections: Int!
  likes: Int!
}

input ContentTargetCreateNestedManyWithoutCollectionsInput {
  connect: [ContentTargetWhereUniqueInput!]
  connectOrCreate: [ContentTargetCreateOrConnectWithoutCollectionsInput!]
  create: [ContentTargetCreateWithoutCollectionsInput!]
}

input ContentTargetCreateNestedOneWithoutLikesInput {
  connect: ContentTargetWhereUniqueInput
  connectOrCreate: ContentTargetCreateOrConnectWithoutLikesInput
  create: ContentTargetCreateWithoutLikesInput
}

input ContentTargetCreateOrConnectWithoutCollectionsInput {
  create: ContentTargetCreateWithoutCollectionsInput!
  where: ContentTargetWhereUniqueInput!
}

input ContentTargetCreateOrConnectWithoutLikesInput {
  create: ContentTargetCreateWithoutLikesInput!
  where: ContentTargetWhereUniqueInput!
}

input ContentTargetCreateWithoutCollectionsInput {
  comment: CommentCreateNestedOneWithoutContentTargetInput
  likes: LikeCreateNestedManyWithoutContentTargetInput
  lore: LoreCreateNestedOneWithoutContentTargetInput
  post: PostCreateNestedOneWithoutContentTargetInput
  type: ContentTargetType!
}

input ContentTargetCreateWithoutLikesInput {
  collections: CollectionCreateNestedManyWithoutContentTargetListInput
  comment: CommentCreateNestedOneWithoutContentTargetInput
  lore: LoreCreateNestedOneWithoutContentTargetInput
  post: PostCreateNestedOneWithoutContentTargetInput
  type: ContentTargetType!
}

input ContentTargetListRelationFilter {
  every: ContentTargetWhereInput
  none: ContentTargetWhereInput
  some: ContentTargetWhereInput
}

input ContentTargetOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ContentTargetOrderByRelevanceFieldEnum {
  id
}

input ContentTargetOrderByRelevanceInput {
  fields: [ContentTargetOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ContentTargetOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ContentTargetOrderByRelevanceInput
  collections: CollectionOrderByRelationAggregateInput
  comment: CommentOrderByWithRelationAndSearchRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  likes: LikeOrderByRelationAggregateInput
  lore: LoreOrderByWithRelationAndSearchRelevanceInput
  post: PostOrderByWithRelationAndSearchRelevanceInput
  type: SortOrder
  updatedAt: SortOrder
}

input ContentTargetRelationFilter {
  is: ContentTargetWhereInput
  isNot: ContentTargetWhereInput
}

input ContentTargetScalarWhereInput {
  AND: [ContentTargetScalarWhereInput!]
  NOT: [ContentTargetScalarWhereInput!]
  OR: [ContentTargetScalarWhereInput!]
  createdAt: DateTimeFilter
  id: UuidFilter
  type: EnumContentTargetTypeFilter
  updatedAt: DateTimeFilter
}

enum ContentTargetType {
  Comment
  Lore
  Post
}

input ContentTargetUpdateManyMutationInput {
  type: EnumContentTargetTypeFieldUpdateOperationsInput
}

input ContentTargetUpdateManyWithWhereWithoutCollectionsInput {
  data: ContentTargetUpdateManyMutationInput!
  where: ContentTargetScalarWhereInput!
}

input ContentTargetUpdateManyWithoutCollectionsNestedInput {
  connect: [ContentTargetWhereUniqueInput!]
  connectOrCreate: [ContentTargetCreateOrConnectWithoutCollectionsInput!]
  create: [ContentTargetCreateWithoutCollectionsInput!]
  delete: [ContentTargetWhereUniqueInput!]
  deleteMany: [ContentTargetScalarWhereInput!]
  disconnect: [ContentTargetWhereUniqueInput!]
  set: [ContentTargetWhereUniqueInput!]
  update: [ContentTargetUpdateWithWhereUniqueWithoutCollectionsInput!]
  updateMany: [ContentTargetUpdateManyWithWhereWithoutCollectionsInput!]
  upsert: [ContentTargetUpsertWithWhereUniqueWithoutCollectionsInput!]
}

input ContentTargetUpdateOneRequiredWithoutLikesNestedInput {
  connect: ContentTargetWhereUniqueInput
  connectOrCreate: ContentTargetCreateOrConnectWithoutLikesInput
  create: ContentTargetCreateWithoutLikesInput
  update: ContentTargetUpdateWithoutLikesInput
  upsert: ContentTargetUpsertWithoutLikesInput
}

input ContentTargetUpdateWithWhereUniqueWithoutCollectionsInput {
  data: ContentTargetUpdateWithoutCollectionsInput!
  where: ContentTargetWhereUniqueInput!
}

input ContentTargetUpdateWithoutCollectionsInput {
  comment: CommentUpdateOneWithoutContentTargetNestedInput
  likes: LikeUpdateManyWithoutContentTargetNestedInput
  lore: LoreUpdateOneWithoutContentTargetNestedInput
  post: PostUpdateOneWithoutContentTargetNestedInput
  type: EnumContentTargetTypeFieldUpdateOperationsInput
}

input ContentTargetUpdateWithoutLikesInput {
  collections: CollectionUpdateManyWithoutContentTargetListNestedInput
  comment: CommentUpdateOneWithoutContentTargetNestedInput
  lore: LoreUpdateOneWithoutContentTargetNestedInput
  post: PostUpdateOneWithoutContentTargetNestedInput
  type: EnumContentTargetTypeFieldUpdateOperationsInput
}

input ContentTargetUpsertWithWhereUniqueWithoutCollectionsInput {
  create: ContentTargetCreateWithoutCollectionsInput!
  update: ContentTargetUpdateWithoutCollectionsInput!
  where: ContentTargetWhereUniqueInput!
}

input ContentTargetUpsertWithoutLikesInput {
  create: ContentTargetCreateWithoutLikesInput!
  update: ContentTargetUpdateWithoutLikesInput!
}

input ContentTargetWhereInput {
  AND: [ContentTargetWhereInput!]
  NOT: [ContentTargetWhereInput!]
  OR: [ContentTargetWhereInput!]
  collections: CollectionListRelationFilter
  comment: CommentRelationFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  likes: LikeListRelationFilter
  lore: LoreRelationFilter
  post: PostRelationFilter
  type: EnumContentTargetTypeFilter
  updatedAt: DateTimeFilter
}

input ContentTargetWhereUniqueInput {
  id: UUID
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input EnumContentTargetTypeFieldUpdateOperationsInput {
  set: ContentTargetType
}

input EnumContentTargetTypeFilter {
  equals: ContentTargetType
  in: [ContentTargetType!]
  not: NestedEnumContentTargetTypeFilter
  notIn: [ContentTargetType!]
}

input EnumFollowTargetTypeFieldUpdateOperationsInput {
  set: FollowTargetType
}

input EnumFollowTargetTypeFilter {
  equals: FollowTargetType
  in: [FollowTargetType!]
  not: NestedEnumFollowTargetTypeFilter
  notIn: [FollowTargetType!]
}

input EnumPostTypeFilter {
  equals: PostType
  in: [PostType!]
  not: NestedEnumPostTypeFilter
  notIn: [PostType!]
}

input EnumShortcodeTypeFilter {
  equals: ShortcodeType
  in: [ShortcodeType!]
  not: NestedEnumShortcodeTypeFilter
  notIn: [ShortcodeType!]
}

type Follow {
  followedAt: DateTime!
  followee: FollowTarget!
  followeeId: UUID!
  follower: User!
  followerId: UUID!
  id: UUID!
  isRequest: Boolean!
}

input FollowCreateManyFollowerInput {
  followeeId: UUID!
  isRequest: Boolean
}

input FollowCreateManyFollowerInputEnvelope {
  data: [FollowCreateManyFollowerInput!]!
  skipDuplicates: Boolean
}

input FollowCreateNestedManyWithoutFollowerInput {
  connect: [FollowWhereUniqueInput!]
  connectOrCreate: [FollowCreateOrConnectWithoutFollowerInput!]
  create: [FollowCreateWithoutFollowerInput!]
  createMany: FollowCreateManyFollowerInputEnvelope
}

input FollowCreateOrConnectWithoutFollowerInput {
  create: FollowCreateWithoutFollowerInput!
  where: FollowWhereUniqueInput!
}

input FollowCreateWithoutFollowerInput {
  followee: FollowTargetCreateNestedOneWithoutFollowedByInput!
  isRequest: Boolean
}

input FollowFollowerIdFolloweeIdCompoundUniqueInput {
  followeeId: UUID!
  followerId: UUID!
}

input FollowListRelationFilter {
  every: FollowWhereInput
  none: FollowWhereInput
  some: FollowWhereInput
}

input FollowOrderByRelationAggregateInput {
  _count: SortOrder
}

input FollowScalarWhereInput {
  AND: [FollowScalarWhereInput!]
  NOT: [FollowScalarWhereInput!]
  OR: [FollowScalarWhereInput!]
  followedAt: DateTimeFilter
  followeeId: UuidFilter
  followerId: UuidFilter
  id: UuidFilter
  isRequest: BoolFilter
}

type FollowTarget {
  _count: FollowTargetCount!
  collection: Collection
  followedBy: [Follow!]
  id: UUID!
  realm: Realm
  type: FollowTargetType!
  user: User
}

type FollowTargetCount {
  followedBy: Int!
}

input FollowTargetCreateNestedOneWithoutFollowedByInput {
  connect: FollowTargetWhereUniqueInput
  connectOrCreate: FollowTargetCreateOrConnectWithoutFollowedByInput
  create: FollowTargetCreateWithoutFollowedByInput
}

input FollowTargetCreateOrConnectWithoutFollowedByInput {
  create: FollowTargetCreateWithoutFollowedByInput!
  where: FollowTargetWhereUniqueInput!
}

input FollowTargetCreateWithoutFollowedByInput {
  collection: CollectionCreateNestedOneWithoutFollowTargetInput
  realm: RealmCreateNestedOneWithoutFollowTargetInput
  type: FollowTargetType!
  user: UserCreateNestedOneWithoutFollowTargetInput
}

enum FollowTargetOrderByRelevanceFieldEnum {
  id
}

input FollowTargetOrderByRelevanceInput {
  fields: [FollowTargetOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input FollowTargetOrderByWithRelationAndSearchRelevanceInput {
  _relevance: FollowTargetOrderByRelevanceInput
  collection: CollectionOrderByWithRelationAndSearchRelevanceInput
  followedBy: FollowOrderByRelationAggregateInput
  id: SortOrder
  realm: RealmOrderByWithRelationAndSearchRelevanceInput
  type: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
}

input FollowTargetRelationFilter {
  is: FollowTargetWhereInput
  isNot: FollowTargetWhereInput
}

enum FollowTargetType {
  Collection
  Realm
  User
}

input FollowTargetUpdateOneRequiredWithoutFollowedByNestedInput {
  connect: FollowTargetWhereUniqueInput
  connectOrCreate: FollowTargetCreateOrConnectWithoutFollowedByInput
  create: FollowTargetCreateWithoutFollowedByInput
  update: FollowTargetUpdateWithoutFollowedByInput
  upsert: FollowTargetUpsertWithoutFollowedByInput
}

input FollowTargetUpdateWithoutFollowedByInput {
  collection: CollectionUpdateOneWithoutFollowTargetNestedInput
  realm: RealmUpdateOneWithoutFollowTargetNestedInput
  type: EnumFollowTargetTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutFollowTargetNestedInput
}

input FollowTargetUpsertWithoutFollowedByInput {
  create: FollowTargetCreateWithoutFollowedByInput!
  update: FollowTargetUpdateWithoutFollowedByInput!
}

input FollowTargetWhereInput {
  AND: [FollowTargetWhereInput!]
  NOT: [FollowTargetWhereInput!]
  OR: [FollowTargetWhereInput!]
  collection: CollectionRelationFilter
  followedBy: FollowListRelationFilter
  id: UuidFilter
  realm: RealmRelationFilter
  type: EnumFollowTargetTypeFilter
  user: UserRelationFilter
}

input FollowTargetWhereUniqueInput {
  id: UUID
}

input FollowUpdateManyMutationInput {
  isRequest: BoolFieldUpdateOperationsInput
}

input FollowUpdateManyWithWhereWithoutFollowerInput {
  data: FollowUpdateManyMutationInput!
  where: FollowScalarWhereInput!
}

input FollowUpdateManyWithoutFollowerNestedInput {
  connect: [FollowWhereUniqueInput!]
  connectOrCreate: [FollowCreateOrConnectWithoutFollowerInput!]
  create: [FollowCreateWithoutFollowerInput!]
  createMany: FollowCreateManyFollowerInputEnvelope
  delete: [FollowWhereUniqueInput!]
  deleteMany: [FollowScalarWhereInput!]
  disconnect: [FollowWhereUniqueInput!]
  set: [FollowWhereUniqueInput!]
  update: [FollowUpdateWithWhereUniqueWithoutFollowerInput!]
  updateMany: [FollowUpdateManyWithWhereWithoutFollowerInput!]
  upsert: [FollowUpsertWithWhereUniqueWithoutFollowerInput!]
}

input FollowUpdateWithWhereUniqueWithoutFollowerInput {
  data: FollowUpdateWithoutFollowerInput!
  where: FollowWhereUniqueInput!
}

input FollowUpdateWithoutFollowerInput {
  followee: FollowTargetUpdateOneRequiredWithoutFollowedByNestedInput
  isRequest: BoolFieldUpdateOperationsInput
}

input FollowUpsertWithWhereUniqueWithoutFollowerInput {
  create: FollowCreateWithoutFollowerInput!
  update: FollowUpdateWithoutFollowerInput!
  where: FollowWhereUniqueInput!
}

input FollowWhereInput {
  AND: [FollowWhereInput!]
  NOT: [FollowWhereInput!]
  OR: [FollowWhereInput!]
  followedAt: DateTimeFilter
  followee: FollowTargetRelationFilter
  followeeId: UuidFilter
  follower: UserRelationFilter
  followerId: UuidFilter
  id: UuidFilter
  isRequest: BoolFilter
}

input FollowWhereUniqueInput {
  followerId_followeeId: FollowFollowerIdFolloweeIdCompoundUniqueInput
  id: UUID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Like {
  contentTarget: ContentTarget!
  contentTargetId: UUID!
  id: UUID!
  likedAt: DateTime!
  user: User!
  userId: UUID!
}

input LikeContentTargetIdUserIdCompoundUniqueInput {
  contentTargetId: UUID!
  userId: UUID!
}

input LikeCreateManyContentTargetInput {
  id: UUID
  likedAt: DateTime
  userId: UUID!
}

input LikeCreateManyContentTargetInputEnvelope {
  data: [LikeCreateManyContentTargetInput!]!
  skipDuplicates: Boolean
}

input LikeCreateManyUserInput {
  contentTargetId: UUID!
  id: UUID
  likedAt: DateTime
}

input LikeCreateManyUserInputEnvelope {
  data: [LikeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input LikeCreateNestedManyWithoutContentTargetInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutContentTargetInput!]
  create: [LikeCreateWithoutContentTargetInput!]
  createMany: LikeCreateManyContentTargetInputEnvelope
}

input LikeCreateNestedManyWithoutUserInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutUserInput!]
  create: [LikeCreateWithoutUserInput!]
  createMany: LikeCreateManyUserInputEnvelope
}

input LikeCreateOrConnectWithoutContentTargetInput {
  create: LikeCreateWithoutContentTargetInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateOrConnectWithoutUserInput {
  create: LikeCreateWithoutUserInput!
  where: LikeWhereUniqueInput!
}

input LikeCreateWithoutContentTargetInput {
  id: UUID
  likedAt: DateTime
  user: UserCreateNestedOneWithoutLikesInput!
}

input LikeCreateWithoutUserInput {
  contentTarget: ContentTargetCreateNestedOneWithoutLikesInput!
  id: UUID
  likedAt: DateTime
}

input LikeListRelationFilter {
  every: LikeWhereInput
  none: LikeWhereInput
  some: LikeWhereInput
}

input LikeOrderByRelationAggregateInput {
  _count: SortOrder
}

input LikeScalarWhereInput {
  AND: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  contentTargetId: UuidFilter
  id: UuidFilter
  likedAt: DateTimeFilter
  userId: UuidFilter
}

input LikeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  likedAt: DateTimeFieldUpdateOperationsInput
}

input LikeUpdateManyWithWhereWithoutContentTargetInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithWhereWithoutUserInput {
  data: LikeUpdateManyMutationInput!
  where: LikeScalarWhereInput!
}

input LikeUpdateManyWithoutContentTargetNestedInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutContentTargetInput!]
  create: [LikeCreateWithoutContentTargetInput!]
  createMany: LikeCreateManyContentTargetInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutContentTargetInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutContentTargetInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutContentTargetInput!]
}

input LikeUpdateManyWithoutUserNestedInput {
  connect: [LikeWhereUniqueInput!]
  connectOrCreate: [LikeCreateOrConnectWithoutUserInput!]
  create: [LikeCreateWithoutUserInput!]
  createMany: LikeCreateManyUserInputEnvelope
  delete: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  disconnect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LikeUpdateManyWithWhereWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
}

input LikeUpdateWithWhereUniqueWithoutContentTargetInput {
  data: LikeUpdateWithoutContentTargetInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  data: LikeUpdateWithoutUserInput!
  where: LikeWhereUniqueInput!
}

input LikeUpdateWithoutContentTargetInput {
  id: StringFieldUpdateOperationsInput
  likedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutLikesNestedInput
}

input LikeUpdateWithoutUserInput {
  contentTarget: ContentTargetUpdateOneRequiredWithoutLikesNestedInput
  id: StringFieldUpdateOperationsInput
  likedAt: DateTimeFieldUpdateOperationsInput
}

input LikeUpsertWithWhereUniqueWithoutContentTargetInput {
  create: LikeCreateWithoutContentTargetInput!
  update: LikeUpdateWithoutContentTargetInput!
  where: LikeWhereUniqueInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  create: LikeCreateWithoutUserInput!
  update: LikeUpdateWithoutUserInput!
  where: LikeWhereUniqueInput!
}

input LikeWhereInput {
  AND: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  contentTarget: ContentTargetRelationFilter
  contentTargetId: UuidFilter
  id: UuidFilter
  likedAt: DateTimeFilter
  user: UserRelationFilter
  userId: UuidFilter
}

input LikeWhereUniqueInput {
  contentTargetId_userId: LikeContentTargetIdUserIdCompoundUniqueInput
  id: UUID
}

input LoginCredentialsEmailPasswordInput {
  email: String!
  password: String!
}

input LoginCredentialsUsernamePasswordInput {
  password: String!
  username: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Lore {
  author: User!
  authorId: UUID!
  contentTarget: ContentTarget!
  contentTargetId: UUID!
  contents: JSON!
  createdAt: DateTime!
  id: UUID!
  openedAt: DateTime!
  private: Boolean!
  realm: Realm!
  realmId: UUID!
  representsRealm: Realm
  shortcode: Shortcode
  shortcodeId: String
  slug: String!
  slugDuplicateCount: Int!
  summary: String
  thumbnailUrl: URL
  title: String!
  updatedAt: DateTime!
}

type LoreAvgAggregate {
  slugDuplicateCount: Float
}

type LoreCountAggregate {
  _all: Int!
  authorId: Int!
  contentTargetId: Int!
  contents: Int!
  createdAt: Int!
  id: Int!
  openedAt: Int!
  private: Int!
  realmId: Int!
  shortcodeId: Int!
  slug: Int!
  slugDuplicateCount: Int!
  summary: Int!
  thumbnailUrl: Int!
  title: Int!
  updatedAt: Int!
}

input LoreCreateInput {
  author: UserCreateNestedOneWithoutLoresInput!
  contents: JSON!
  private: Boolean
  realm: RealmCreateNestedOneWithoutLoresInput!
  representsRealm: RealmCreateNestedOneWithoutRepresentationLoreInput
  shortcode: ShortcodeCreateNestedOneWithoutLoreInput
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreCreateManyAuthorInput {
  contentTargetId: UUID!
  contents: JSON!
  private: Boolean
  realmId: UUID!
  shortcodeId: String
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreCreateManyAuthorInputEnvelope {
  data: [LoreCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input LoreCreateManyRealmInput {
  authorId: UUID!
  contentTargetId: UUID!
  contents: JSON!
  private: Boolean
  shortcodeId: String
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreCreateManyRealmInputEnvelope {
  data: [LoreCreateManyRealmInput!]!
  skipDuplicates: Boolean
}

input LoreCreateNestedManyWithoutAuthorInput {
  connect: [LoreWhereUniqueInput!]
  connectOrCreate: [LoreCreateOrConnectWithoutAuthorInput!]
  create: [LoreCreateWithoutAuthorInput!]
  createMany: LoreCreateManyAuthorInputEnvelope
}

input LoreCreateNestedManyWithoutRealmInput {
  connect: [LoreWhereUniqueInput!]
  connectOrCreate: [LoreCreateOrConnectWithoutRealmInput!]
  create: [LoreCreateWithoutRealmInput!]
  createMany: LoreCreateManyRealmInputEnvelope
}

input LoreCreateNestedOneWithoutContentTargetInput {
  connect: LoreWhereUniqueInput
  connectOrCreate: LoreCreateOrConnectWithoutContentTargetInput
  create: LoreCreateWithoutContentTargetInput
}

input LoreCreateNestedOneWithoutShortcodeInput {
  connect: LoreWhereUniqueInput
  connectOrCreate: LoreCreateOrConnectWithoutShortcodeInput
  create: LoreCreateWithoutShortcodeInput
}

input LoreCreateOrConnectWithoutAuthorInput {
  create: LoreCreateWithoutAuthorInput!
  where: LoreWhereUniqueInput!
}

input LoreCreateOrConnectWithoutContentTargetInput {
  create: LoreCreateWithoutContentTargetInput!
  where: LoreWhereUniqueInput!
}

input LoreCreateOrConnectWithoutRealmInput {
  create: LoreCreateWithoutRealmInput!
  where: LoreWhereUniqueInput!
}

input LoreCreateOrConnectWithoutShortcodeInput {
  create: LoreCreateWithoutShortcodeInput!
  where: LoreWhereUniqueInput!
}

input LoreCreateWithoutAuthorInput {
  contents: JSON!
  private: Boolean
  realm: RealmCreateNestedOneWithoutLoresInput!
  representsRealm: RealmCreateNestedOneWithoutRepresentationLoreInput
  shortcode: ShortcodeCreateNestedOneWithoutLoreInput
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreCreateWithoutContentTargetInput {
  author: UserCreateNestedOneWithoutLoresInput!
  contents: JSON!
  private: Boolean
  realm: RealmCreateNestedOneWithoutLoresInput!
  representsRealm: RealmCreateNestedOneWithoutRepresentationLoreInput
  shortcode: ShortcodeCreateNestedOneWithoutLoreInput
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreCreateWithoutRealmInput {
  author: UserCreateNestedOneWithoutLoresInput!
  contents: JSON!
  private: Boolean
  representsRealm: RealmCreateNestedOneWithoutRepresentationLoreInput
  shortcode: ShortcodeCreateNestedOneWithoutLoreInput
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreCreateWithoutShortcodeInput {
  author: UserCreateNestedOneWithoutLoresInput!
  contents: JSON!
  private: Boolean
  realm: RealmCreateNestedOneWithoutLoresInput!
  representsRealm: RealmCreateNestedOneWithoutRepresentationLoreInput
  summary: String
  thumbnailUrl: URL
  title: String!
}

input LoreListRelationFilter {
  every: LoreWhereInput
  none: LoreWhereInput
  some: LoreWhereInput
}

type LoreMaxAggregate {
  authorId: UUID
  contentTargetId: UUID
  createdAt: DateTime
  id: UUID
  openedAt: DateTime
  private: Boolean
  realmId: UUID
  shortcodeId: String
  slug: String
  slugDuplicateCount: Int
  summary: String
  thumbnailUrl: URL
  title: String
  updatedAt: DateTime
}

type LoreMinAggregate {
  authorId: UUID
  contentTargetId: UUID
  createdAt: DateTime
  id: UUID
  openedAt: DateTime
  private: Boolean
  realmId: UUID
  shortcodeId: String
  slug: String
  slugDuplicateCount: Int
  summary: String
  thumbnailUrl: URL
  title: String
  updatedAt: DateTime
}

input LoreOrderByRelationAggregateInput {
  _count: SortOrder
}

enum LoreOrderByRelevanceFieldEnum {
  authorId
  contentTargetId
  id
  realmId
  shortcodeId
  slug
  summary
  thumbnailUrl
  title
}

input LoreOrderByRelevanceInput {
  fields: [LoreOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input LoreOrderByWithRelationAndSearchRelevanceInput {
  _relevance: LoreOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  contentTarget: ContentTargetOrderByWithRelationAndSearchRelevanceInput
  contentTargetId: SortOrder
  contents: SortOrder
  createdAt: SortOrder
  id: SortOrder
  openedAt: SortOrder
  private: SortOrder
  realm: RealmOrderByWithRelationAndSearchRelevanceInput
  realmId: SortOrder
  representsRealm: RealmOrderByWithRelationAndSearchRelevanceInput
  shortcode: ShortcodeOrderByWithRelationAndSearchRelevanceInput
  shortcodeId: SortOrderInput
  slug: SortOrder
  slugDuplicateCount: SortOrder
  summary: SortOrderInput
  thumbnailUrl: SortOrderInput
  title: SortOrder
  updatedAt: SortOrder
}

input LoreRealmIdSlugSlugDuplicateCountCompoundUniqueInput {
  realmId: UUID!
  slug: String!
  slugDuplicateCount: Int!
}

input LoreRelationFilter {
  is: LoreWhereInput
  isNot: LoreWhereInput
}

enum LoreScalarFieldEnum {
  authorId
  contentTargetId
  contents
  createdAt
  id
  openedAt
  private
  realmId
  shortcodeId
  slug
  slugDuplicateCount
  summary
  thumbnailUrl
  title
  updatedAt
}

input LoreScalarWhereInput {
  AND: [LoreScalarWhereInput!]
  NOT: [LoreScalarWhereInput!]
  OR: [LoreScalarWhereInput!]
  authorId: UuidFilter
  contentTargetId: UuidFilter
  contents: JsonFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  openedAt: DateTimeFilter
  private: BoolFilter
  realmId: UuidFilter
  shortcodeId: StringNullableFilter
  slug: StringFilter
  slugDuplicateCount: IntFilter
  summary: StringNullableFilter
  thumbnailUrl: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type LoreSumAggregate {
  slugDuplicateCount: Int
}

input LoreUpdateInput {
  author: UserUpdateOneRequiredWithoutLoresNestedInput
  contents: JSON
  private: BoolFieldUpdateOperationsInput
  realm: RealmUpdateOneRequiredWithoutLoresNestedInput
  representsRealm: RealmUpdateOneWithoutRepresentationLoreNestedInput
  shortcode: ShortcodeUpdateOneWithoutLoreNestedInput
  summary: NullableStringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input LoreUpdateManyMutationInput {
  contents: JSON
  private: BoolFieldUpdateOperationsInput
  summary: NullableStringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input LoreUpdateManyWithWhereWithoutAuthorInput {
  data: LoreUpdateManyMutationInput!
  where: LoreScalarWhereInput!
}

input LoreUpdateManyWithWhereWithoutRealmInput {
  data: LoreUpdateManyMutationInput!
  where: LoreScalarWhereInput!
}

input LoreUpdateManyWithoutAuthorNestedInput {
  connect: [LoreWhereUniqueInput!]
  connectOrCreate: [LoreCreateOrConnectWithoutAuthorInput!]
  create: [LoreCreateWithoutAuthorInput!]
  createMany: LoreCreateManyAuthorInputEnvelope
  delete: [LoreWhereUniqueInput!]
  deleteMany: [LoreScalarWhereInput!]
  disconnect: [LoreWhereUniqueInput!]
  set: [LoreWhereUniqueInput!]
  update: [LoreUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [LoreUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [LoreUpsertWithWhereUniqueWithoutAuthorInput!]
}

input LoreUpdateManyWithoutRealmNestedInput {
  connect: [LoreWhereUniqueInput!]
  connectOrCreate: [LoreCreateOrConnectWithoutRealmInput!]
  create: [LoreCreateWithoutRealmInput!]
  createMany: LoreCreateManyRealmInputEnvelope
  delete: [LoreWhereUniqueInput!]
  deleteMany: [LoreScalarWhereInput!]
  disconnect: [LoreWhereUniqueInput!]
  set: [LoreWhereUniqueInput!]
  update: [LoreUpdateWithWhereUniqueWithoutRealmInput!]
  updateMany: [LoreUpdateManyWithWhereWithoutRealmInput!]
  upsert: [LoreUpsertWithWhereUniqueWithoutRealmInput!]
}

input LoreUpdateOneWithoutContentTargetNestedInput {
  connect: LoreWhereUniqueInput
  connectOrCreate: LoreCreateOrConnectWithoutContentTargetInput
  create: LoreCreateWithoutContentTargetInput
  delete: Boolean
  disconnect: Boolean
  update: LoreUpdateWithoutContentTargetInput
  upsert: LoreUpsertWithoutContentTargetInput
}

input LoreUpdateOneWithoutShortcodeNestedInput {
  connect: LoreWhereUniqueInput
  connectOrCreate: LoreCreateOrConnectWithoutShortcodeInput
  create: LoreCreateWithoutShortcodeInput
  delete: Boolean
  disconnect: Boolean
  update: LoreUpdateWithoutShortcodeInput
  upsert: LoreUpsertWithoutShortcodeInput
}

input LoreUpdateWithWhereUniqueWithoutAuthorInput {
  data: LoreUpdateWithoutAuthorInput!
  where: LoreWhereUniqueInput!
}

input LoreUpdateWithWhereUniqueWithoutRealmInput {
  data: LoreUpdateWithoutRealmInput!
  where: LoreWhereUniqueInput!
}

input LoreUpdateWithoutAuthorInput {
  contents: JSON
  private: BoolFieldUpdateOperationsInput
  realm: RealmUpdateOneRequiredWithoutLoresNestedInput
  representsRealm: RealmUpdateOneWithoutRepresentationLoreNestedInput
  shortcode: ShortcodeUpdateOneWithoutLoreNestedInput
  summary: NullableStringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input LoreUpdateWithoutContentTargetInput {
  author: UserUpdateOneRequiredWithoutLoresNestedInput
  contents: JSON
  private: BoolFieldUpdateOperationsInput
  realm: RealmUpdateOneRequiredWithoutLoresNestedInput
  representsRealm: RealmUpdateOneWithoutRepresentationLoreNestedInput
  shortcode: ShortcodeUpdateOneWithoutLoreNestedInput
  summary: NullableStringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input LoreUpdateWithoutRealmInput {
  author: UserUpdateOneRequiredWithoutLoresNestedInput
  contents: JSON
  private: BoolFieldUpdateOperationsInput
  representsRealm: RealmUpdateOneWithoutRepresentationLoreNestedInput
  shortcode: ShortcodeUpdateOneWithoutLoreNestedInput
  summary: NullableStringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input LoreUpdateWithoutShortcodeInput {
  author: UserUpdateOneRequiredWithoutLoresNestedInput
  contents: JSON
  private: BoolFieldUpdateOperationsInput
  realm: RealmUpdateOneRequiredWithoutLoresNestedInput
  representsRealm: RealmUpdateOneWithoutRepresentationLoreNestedInput
  summary: NullableStringFieldUpdateOperationsInput
  thumbnailUrl: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input LoreUpsertWithWhereUniqueWithoutAuthorInput {
  create: LoreCreateWithoutAuthorInput!
  update: LoreUpdateWithoutAuthorInput!
  where: LoreWhereUniqueInput!
}

input LoreUpsertWithWhereUniqueWithoutRealmInput {
  create: LoreCreateWithoutRealmInput!
  update: LoreUpdateWithoutRealmInput!
  where: LoreWhereUniqueInput!
}

input LoreUpsertWithoutContentTargetInput {
  create: LoreCreateWithoutContentTargetInput!
  update: LoreUpdateWithoutContentTargetInput!
}

input LoreUpsertWithoutShortcodeInput {
  create: LoreCreateWithoutShortcodeInput!
  update: LoreUpdateWithoutShortcodeInput!
}

input LoreWhereInput {
  AND: [LoreWhereInput!]
  NOT: [LoreWhereInput!]
  OR: [LoreWhereInput!]
  author: UserRelationFilter
  authorId: UuidFilter
  contentTarget: ContentTargetRelationFilter
  contentTargetId: UuidFilter
  contents: JsonFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  openedAt: DateTimeFilter
  private: BoolFilter
  realm: RealmRelationFilter
  realmId: UuidFilter
  representsRealm: RealmRelationFilter
  shortcode: ShortcodeRelationFilter
  shortcodeId: StringNullableFilter
  slug: StringFilter
  slugDuplicateCount: IntFilter
  summary: StringNullableFilter
  thumbnailUrl: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input LoreWhereUniqueInput {
  contentTargetId: UUID
  id: UUID
  realmId_slug_slugDuplicateCount: LoreRealmIdSlugSlugDuplicateCountCompoundUniqueInput
  shortcodeId: String
}

type Mutation {
  createAuditLogEntry(data: AuditLogEntryCreateInput!): AuditLogEntry!
  createLore(data: LoreCreateInput!): Lore!
  createRealm(data: RealmCreateInput!): Realm!
  createShortcode(data: ShortcodeCreateInput!): Shortcode!
  createUser(data: UserCreateInput!): User!
  deleteAuditLogEntry(where: AuditLogEntryWhereUniqueInput!): AuditLogEntry!
  deleteLore(where: LoreWhereUniqueInput!): Lore!
  deleteRealm(where: RealmWhereUniqueInput!): Realm!
  deleteShortcode(where: ShortcodeWhereUniqueInput!): Shortcode!
  deleteUser(where: UserWhereUniqueInput!): User!
  logInViaEmailPassword(credentials: LoginCredentialsEmailPasswordInput!): LoginResponse!
  logInViaUsernamePassword(credentials: LoginCredentialsUsernamePasswordInput!): LoginResponse!
  refreshAccessToken(refreshToken: String!): RefreshResponse!
  updateAuditLogEntry(data: AuditLogEntryUpdateInput!, where: AuditLogEntryWhereUniqueInput!): AuditLogEntry!
  updateLore(data: LoreUpdateInput!, where: LoreWhereUniqueInput!): Lore!
  updateRealm(data: RealmUpdateInput!, where: RealmWhereUniqueInput!): Realm!
  updateShortcode(data: ShortcodeUpdateInput!, where: ShortcodeWhereUniqueInput!): Shortcode!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumContentTargetTypeFilter {
  equals: ContentTargetType
  in: [ContentTargetType!]
  not: NestedEnumContentTargetTypeFilter
  notIn: [ContentTargetType!]
}

input NestedEnumFollowTargetTypeFilter {
  equals: FollowTargetType
  in: [FollowTargetType!]
  not: NestedEnumFollowTargetTypeFilter
  notIn: [FollowTargetType!]
}

input NestedEnumPostTypeFilter {
  equals: PostType
  in: [PostType!]
  not: NestedEnumPostTypeFilter
  notIn: [PostType!]
}

input NestedEnumShortcodeTypeFilter {
  equals: ShortcodeType
  in: [ShortcodeType!]
  not: NestedEnumShortcodeTypeFilter
  notIn: [ShortcodeType!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String!]
  search: String
}

input NestedUuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidNullableFilter
  notIn: [String!]
  search: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Post {
  _count: PostCount!
  author: User!
  authorId: UUID!
  children: [Comment!]
  contentTarget: ContentTarget!
  contentTargetId: UUID!
  contents: JSON!
  createdAt: DateTime!
  id: UUID!
  shortcode: Shortcode
  shortcodeId: String
  type: PostType!
  updatedAt: DateTime!
}

type PostCount {
  children: Int!
}

input PostCreateManyAuthorInput {
  contentTargetId: UUID!
  contents: JSON!
  shortcodeId: String
  type: PostType!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedOneWithoutChildrenInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutChildrenInput
  create: PostCreateWithoutChildrenInput
}

input PostCreateNestedOneWithoutContentTargetInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutContentTargetInput
  create: PostCreateWithoutContentTargetInput
}

input PostCreateNestedOneWithoutShortcodeInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutShortcodeInput
  create: PostCreateWithoutShortcodeInput
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutChildrenInput {
  create: PostCreateWithoutChildrenInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutContentTargetInput {
  create: PostCreateWithoutContentTargetInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutShortcodeInput {
  create: PostCreateWithoutShortcodeInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  children: CommentCreateNestedManyWithoutParentPostInput
  contents: JSON!
  shortcode: ShortcodeCreateNestedOneWithoutPostInput
  type: PostType!
}

input PostCreateWithoutChildrenInput {
  author: UserCreateNestedOneWithoutPostsInput!
  contents: JSON!
  shortcode: ShortcodeCreateNestedOneWithoutPostInput
  type: PostType!
}

input PostCreateWithoutContentTargetInput {
  author: UserCreateNestedOneWithoutPostsInput!
  children: CommentCreateNestedManyWithoutParentPostInput
  contents: JSON!
  shortcode: ShortcodeCreateNestedOneWithoutPostInput
  type: PostType!
}

input PostCreateWithoutShortcodeInput {
  author: UserCreateNestedOneWithoutPostsInput!
  children: CommentCreateNestedManyWithoutParentPostInput
  contents: JSON!
  type: PostType!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

enum PostOrderByRelevanceFieldEnum {
  authorId
  contentTargetId
  id
  shortcodeId
}

input PostOrderByRelevanceInput {
  fields: [PostOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input PostOrderByWithRelationAndSearchRelevanceInput {
  _relevance: PostOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  children: CommentOrderByRelationAggregateInput
  contentTarget: ContentTargetOrderByWithRelationAndSearchRelevanceInput
  contentTargetId: SortOrder
  contents: SortOrder
  createdAt: SortOrder
  id: SortOrder
  shortcode: ShortcodeOrderByWithRelationAndSearchRelevanceInput
  shortcodeId: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: UuidFilter
  contentTargetId: UuidFilter
  contents: JsonFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  shortcodeId: StringNullableFilter
  type: EnumPostTypeFilter
  updatedAt: DateTimeFilter
}

enum PostType {
  Article
  Poll
  Text
}

input PostUpdateManyMutationInput {
  contents: JSON
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorNestedInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateOneRequiredWithoutChildrenNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutChildrenInput
  create: PostCreateWithoutChildrenInput
  update: PostUpdateWithoutChildrenInput
  upsert: PostUpsertWithoutChildrenInput
}

input PostUpdateOneWithoutContentTargetNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutContentTargetInput
  create: PostCreateWithoutContentTargetInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutContentTargetInput
  upsert: PostUpsertWithoutContentTargetInput
}

input PostUpdateOneWithoutShortcodeNestedInput {
  connect: PostWhereUniqueInput
  connectOrCreate: PostCreateOrConnectWithoutShortcodeInput
  create: PostCreateWithoutShortcodeInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutShortcodeInput
  upsert: PostUpsertWithoutShortcodeInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  children: CommentUpdateManyWithoutParentPostNestedInput
  contents: JSON
  shortcode: ShortcodeUpdateOneWithoutPostNestedInput
}

input PostUpdateWithoutChildrenInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  contents: JSON
  shortcode: ShortcodeUpdateOneWithoutPostNestedInput
}

input PostUpdateWithoutContentTargetInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  children: CommentUpdateManyWithoutParentPostNestedInput
  contents: JSON
  shortcode: ShortcodeUpdateOneWithoutPostNestedInput
}

input PostUpdateWithoutShortcodeInput {
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  children: CommentUpdateManyWithoutParentPostNestedInput
  contents: JSON
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutChildrenInput {
  create: PostCreateWithoutChildrenInput!
  update: PostUpdateWithoutChildrenInput!
}

input PostUpsertWithoutContentTargetInput {
  create: PostCreateWithoutContentTargetInput!
  update: PostUpdateWithoutContentTargetInput!
}

input PostUpsertWithoutShortcodeInput {
  create: PostCreateWithoutShortcodeInput!
  update: PostUpdateWithoutShortcodeInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: UuidFilter
  children: CommentListRelationFilter
  contentTarget: ContentTargetRelationFilter
  contentTargetId: UuidFilter
  contents: JsonFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  shortcode: ShortcodeRelationFilter
  shortcodeId: StringNullableFilter
  type: EnumPostTypeFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  contentTargetId: UUID
  id: UUID
  shortcodeId: String
}

type Query {
  auditLogEntries(cursor: AuditLogEntryWhereUniqueInput, distinct: [AuditLogEntryScalarFieldEnum!], orderBy: [AuditLogEntryOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: AuditLogEntryWhereInput): [AuditLogEntry!]!
  auditLogEntry(where: AuditLogEntryWhereUniqueInput!): AuditLogEntry
  lore(where: LoreWhereUniqueInput!): Lore
  lores(cursor: LoreWhereUniqueInput, distinct: [LoreScalarFieldEnum!], orderBy: [LoreOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: LoreWhereInput): [Lore!]!
  me: User
  realm(where: RealmWhereUniqueInput!): Realm
  realms(cursor: RealmWhereUniqueInput, distinct: [RealmScalarFieldEnum!], orderBy: [RealmOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: RealmWhereInput): [Realm!]!
  shortcode(where: ShortcodeWhereUniqueInput!): Shortcode
  slugify(text: String!): String!
  user(where: UserWhereUniqueInput!): User
  usernameTaken(username: String!): Boolean!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

type Realm {
  _count: RealmCount!
  author: User!
  authorId: UUID!
  createdAt: DateTime!
  followTarget: FollowTarget!
  followTargetId: UUID!
  id: UUID!
  lores: [Lore!]!
  private: Boolean!
  representationLore: Lore!
  representationLoreId: String
  shortcode: Shortcode
  shortcodeId: String
  slug: String!
  slugDuplicateCount: Int!
  title: String!
  updatedAt: DateTime!
}

input RealmAuthorIdSlugSlugDuplicateCountCompoundUniqueInput {
  authorId: UUID!
  slug: String!
  slugDuplicateCount: Int!
}

type RealmAvgAggregate {
  slugDuplicateCount: Float
}

type RealmCount {
  lores: Int!
}

type RealmCountAggregate {
  _all: Int!
  authorId: Int!
  createdAt: Int!
  followTargetId: Int!
  id: Int!
  private: Int!
  representationLoreId: Int!
  shortcodeId: Int!
  slug: Int!
  slugDuplicateCount: Int!
  title: Int!
  updatedAt: Int!
}

input RealmCreateInput {
  author: UserCreateNestedOneWithoutRealmsInput!
  lores: LoreCreateNestedManyWithoutRealmInput
  private: Boolean
  shortcode: ShortcodeCreateNestedOneWithoutRealmInput
  title: String!
}

input RealmCreateManyAuthorInput {
  followTargetId: UUID!
  private: Boolean
  representationLoreId: String
  shortcodeId: String
  title: String!
}

input RealmCreateManyAuthorInputEnvelope {
  data: [RealmCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input RealmCreateNestedManyWithoutAuthorInput {
  connect: [RealmWhereUniqueInput!]
  connectOrCreate: [RealmCreateOrConnectWithoutAuthorInput!]
  create: [RealmCreateWithoutAuthorInput!]
  createMany: RealmCreateManyAuthorInputEnvelope
}

input RealmCreateNestedOneWithoutFollowTargetInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutFollowTargetInput
  create: RealmCreateWithoutFollowTargetInput
}

input RealmCreateNestedOneWithoutLoresInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutLoresInput
  create: RealmCreateWithoutLoresInput
}

input RealmCreateNestedOneWithoutRepresentationLoreInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutRepresentationLoreInput
  create: RealmCreateWithoutRepresentationLoreInput
}

input RealmCreateNestedOneWithoutShortcodeInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutShortcodeInput
  create: RealmCreateWithoutShortcodeInput
}

input RealmCreateOrConnectWithoutAuthorInput {
  create: RealmCreateWithoutAuthorInput!
  where: RealmWhereUniqueInput!
}

input RealmCreateOrConnectWithoutFollowTargetInput {
  create: RealmCreateWithoutFollowTargetInput!
  where: RealmWhereUniqueInput!
}

input RealmCreateOrConnectWithoutLoresInput {
  create: RealmCreateWithoutLoresInput!
  where: RealmWhereUniqueInput!
}

input RealmCreateOrConnectWithoutRepresentationLoreInput {
  create: RealmCreateWithoutRepresentationLoreInput!
  where: RealmWhereUniqueInput!
}

input RealmCreateOrConnectWithoutShortcodeInput {
  create: RealmCreateWithoutShortcodeInput!
  where: RealmWhereUniqueInput!
}

input RealmCreateWithoutAuthorInput {
  lores: LoreCreateNestedManyWithoutRealmInput
  private: Boolean
  shortcode: ShortcodeCreateNestedOneWithoutRealmInput
  title: String!
}

input RealmCreateWithoutFollowTargetInput {
  author: UserCreateNestedOneWithoutRealmsInput!
  lores: LoreCreateNestedManyWithoutRealmInput
  private: Boolean
  shortcode: ShortcodeCreateNestedOneWithoutRealmInput
  title: String!
}

input RealmCreateWithoutLoresInput {
  author: UserCreateNestedOneWithoutRealmsInput!
  private: Boolean
  shortcode: ShortcodeCreateNestedOneWithoutRealmInput
  title: String!
}

input RealmCreateWithoutRepresentationLoreInput {
  author: UserCreateNestedOneWithoutRealmsInput!
  lores: LoreCreateNestedManyWithoutRealmInput
  private: Boolean
  shortcode: ShortcodeCreateNestedOneWithoutRealmInput
  title: String!
}

input RealmCreateWithoutShortcodeInput {
  author: UserCreateNestedOneWithoutRealmsInput!
  lores: LoreCreateNestedManyWithoutRealmInput
  private: Boolean
  title: String!
}

input RealmListRelationFilter {
  every: RealmWhereInput
  none: RealmWhereInput
  some: RealmWhereInput
}

type RealmMaxAggregate {
  authorId: UUID
  createdAt: DateTime
  followTargetId: UUID
  id: UUID
  private: Boolean
  representationLoreId: String
  shortcodeId: String
  slug: String
  slugDuplicateCount: Int
  title: String
  updatedAt: DateTime
}

type RealmMinAggregate {
  authorId: UUID
  createdAt: DateTime
  followTargetId: UUID
  id: UUID
  private: Boolean
  representationLoreId: String
  shortcodeId: String
  slug: String
  slugDuplicateCount: Int
  title: String
  updatedAt: DateTime
}

input RealmOrderByRelationAggregateInput {
  _count: SortOrder
}

enum RealmOrderByRelevanceFieldEnum {
  authorId
  followTargetId
  id
  representationLoreId
  shortcodeId
  slug
  title
}

input RealmOrderByRelevanceInput {
  fields: [RealmOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input RealmOrderByWithRelationAndSearchRelevanceInput {
  _relevance: RealmOrderByRelevanceInput
  author: UserOrderByWithRelationAndSearchRelevanceInput
  authorId: SortOrder
  createdAt: SortOrder
  followTarget: FollowTargetOrderByWithRelationAndSearchRelevanceInput
  followTargetId: SortOrder
  id: SortOrder
  lores: LoreOrderByRelationAggregateInput
  private: SortOrder
  representationLore: LoreOrderByWithRelationAndSearchRelevanceInput
  representationLoreId: SortOrderInput
  shortcode: ShortcodeOrderByWithRelationAndSearchRelevanceInput
  shortcodeId: SortOrderInput
  slug: SortOrder
  slugDuplicateCount: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input RealmRelationFilter {
  is: RealmWhereInput
  isNot: RealmWhereInput
}

enum RealmScalarFieldEnum {
  authorId
  createdAt
  followTargetId
  id
  private
  representationLoreId
  shortcodeId
  slug
  slugDuplicateCount
  title
  updatedAt
}

input RealmScalarWhereInput {
  AND: [RealmScalarWhereInput!]
  NOT: [RealmScalarWhereInput!]
  OR: [RealmScalarWhereInput!]
  authorId: UuidFilter
  createdAt: DateTimeFilter
  followTargetId: UuidFilter
  id: UuidFilter
  private: BoolFilter
  representationLoreId: UuidNullableFilter
  shortcodeId: StringNullableFilter
  slug: StringFilter
  slugDuplicateCount: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

type RealmSumAggregate {
  slugDuplicateCount: Int
}

input RealmUpdateInput {
  author: UserUpdateOneRequiredWithoutRealmsNestedInput
  lores: LoreUpdateManyWithoutRealmNestedInput
  private: BoolFieldUpdateOperationsInput
  shortcode: ShortcodeUpdateOneWithoutRealmNestedInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpdateManyMutationInput {
  private: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpdateManyWithWhereWithoutAuthorInput {
  data: RealmUpdateManyMutationInput!
  where: RealmScalarWhereInput!
}

input RealmUpdateManyWithoutAuthorNestedInput {
  connect: [RealmWhereUniqueInput!]
  connectOrCreate: [RealmCreateOrConnectWithoutAuthorInput!]
  create: [RealmCreateWithoutAuthorInput!]
  createMany: RealmCreateManyAuthorInputEnvelope
  delete: [RealmWhereUniqueInput!]
  deleteMany: [RealmScalarWhereInput!]
  disconnect: [RealmWhereUniqueInput!]
  set: [RealmWhereUniqueInput!]
  update: [RealmUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RealmUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [RealmUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RealmUpdateOneRequiredWithoutLoresNestedInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutLoresInput
  create: RealmCreateWithoutLoresInput
  update: RealmUpdateWithoutLoresInput
  upsert: RealmUpsertWithoutLoresInput
}

input RealmUpdateOneWithoutFollowTargetNestedInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutFollowTargetInput
  create: RealmCreateWithoutFollowTargetInput
  delete: Boolean
  disconnect: Boolean
  update: RealmUpdateWithoutFollowTargetInput
  upsert: RealmUpsertWithoutFollowTargetInput
}

input RealmUpdateOneWithoutRepresentationLoreNestedInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutRepresentationLoreInput
  create: RealmCreateWithoutRepresentationLoreInput
  delete: Boolean
  disconnect: Boolean
  update: RealmUpdateWithoutRepresentationLoreInput
  upsert: RealmUpsertWithoutRepresentationLoreInput
}

input RealmUpdateOneWithoutShortcodeNestedInput {
  connect: RealmWhereUniqueInput
  connectOrCreate: RealmCreateOrConnectWithoutShortcodeInput
  create: RealmCreateWithoutShortcodeInput
  delete: Boolean
  disconnect: Boolean
  update: RealmUpdateWithoutShortcodeInput
  upsert: RealmUpsertWithoutShortcodeInput
}

input RealmUpdateWithWhereUniqueWithoutAuthorInput {
  data: RealmUpdateWithoutAuthorInput!
  where: RealmWhereUniqueInput!
}

input RealmUpdateWithoutAuthorInput {
  lores: LoreUpdateManyWithoutRealmNestedInput
  private: BoolFieldUpdateOperationsInput
  shortcode: ShortcodeUpdateOneWithoutRealmNestedInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpdateWithoutFollowTargetInput {
  author: UserUpdateOneRequiredWithoutRealmsNestedInput
  lores: LoreUpdateManyWithoutRealmNestedInput
  private: BoolFieldUpdateOperationsInput
  shortcode: ShortcodeUpdateOneWithoutRealmNestedInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpdateWithoutLoresInput {
  author: UserUpdateOneRequiredWithoutRealmsNestedInput
  private: BoolFieldUpdateOperationsInput
  shortcode: ShortcodeUpdateOneWithoutRealmNestedInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpdateWithoutRepresentationLoreInput {
  author: UserUpdateOneRequiredWithoutRealmsNestedInput
  lores: LoreUpdateManyWithoutRealmNestedInput
  private: BoolFieldUpdateOperationsInput
  shortcode: ShortcodeUpdateOneWithoutRealmNestedInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpdateWithoutShortcodeInput {
  author: UserUpdateOneRequiredWithoutRealmsNestedInput
  lores: LoreUpdateManyWithoutRealmNestedInput
  private: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input RealmUpsertWithWhereUniqueWithoutAuthorInput {
  create: RealmCreateWithoutAuthorInput!
  update: RealmUpdateWithoutAuthorInput!
  where: RealmWhereUniqueInput!
}

input RealmUpsertWithoutFollowTargetInput {
  create: RealmCreateWithoutFollowTargetInput!
  update: RealmUpdateWithoutFollowTargetInput!
}

input RealmUpsertWithoutLoresInput {
  create: RealmCreateWithoutLoresInput!
  update: RealmUpdateWithoutLoresInput!
}

input RealmUpsertWithoutRepresentationLoreInput {
  create: RealmCreateWithoutRepresentationLoreInput!
  update: RealmUpdateWithoutRepresentationLoreInput!
}

input RealmUpsertWithoutShortcodeInput {
  create: RealmCreateWithoutShortcodeInput!
  update: RealmUpdateWithoutShortcodeInput!
}

input RealmWhereInput {
  AND: [RealmWhereInput!]
  NOT: [RealmWhereInput!]
  OR: [RealmWhereInput!]
  author: UserRelationFilter
  authorId: UuidFilter
  createdAt: DateTimeFilter
  followTarget: FollowTargetRelationFilter
  followTargetId: UuidFilter
  id: UuidFilter
  lores: LoreListRelationFilter
  private: BoolFilter
  representationLore: LoreRelationFilter
  representationLoreId: UuidNullableFilter
  shortcode: ShortcodeRelationFilter
  shortcodeId: StringNullableFilter
  slug: StringFilter
  slugDuplicateCount: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input RealmWhereUniqueInput {
  authorId_slug_slugDuplicateCount: RealmAuthorIdSlugSlugDuplicateCountCompoundUniqueInput
  followTargetId: UUID
  id: UUID
  representationLoreId: String
  shortcodeId: String
}

type RefreshResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Shortcode {
  collection: Collection
  comment: Comment
  createdAt: DateTime!
  data: JSON
  id: ID!
  lore: Lore
  post: Post
  realm: Realm
  type: ShortcodeType!
  user: User
}

type ShortcodeCountAggregate {
  _all: Int!
  createdAt: Int!
  data: Int!
  id: Int!
  type: Int!
}

input ShortcodeCreateInput {
  collection: CollectionCreateNestedOneWithoutShortcodeInput
  comment: CommentCreateNestedOneWithoutShortcodeInput
  data: JSON
  lore: LoreCreateNestedOneWithoutShortcodeInput
  post: PostCreateNestedOneWithoutShortcodeInput
  realm: RealmCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
  user: UserCreateNestedOneWithoutShortcodeInput
}

input ShortcodeCreateNestedOneWithoutCollectionInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutCollectionInput
  create: ShortcodeCreateWithoutCollectionInput
}

input ShortcodeCreateNestedOneWithoutCommentInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutCommentInput
  create: ShortcodeCreateWithoutCommentInput
}

input ShortcodeCreateNestedOneWithoutLoreInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutLoreInput
  create: ShortcodeCreateWithoutLoreInput
}

input ShortcodeCreateNestedOneWithoutPostInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutPostInput
  create: ShortcodeCreateWithoutPostInput
}

input ShortcodeCreateNestedOneWithoutRealmInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutRealmInput
  create: ShortcodeCreateWithoutRealmInput
}

input ShortcodeCreateNestedOneWithoutUserInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutUserInput
  create: ShortcodeCreateWithoutUserInput
}

input ShortcodeCreateOrConnectWithoutCollectionInput {
  create: ShortcodeCreateWithoutCollectionInput!
  where: ShortcodeWhereUniqueInput!
}

input ShortcodeCreateOrConnectWithoutCommentInput {
  create: ShortcodeCreateWithoutCommentInput!
  where: ShortcodeWhereUniqueInput!
}

input ShortcodeCreateOrConnectWithoutLoreInput {
  create: ShortcodeCreateWithoutLoreInput!
  where: ShortcodeWhereUniqueInput!
}

input ShortcodeCreateOrConnectWithoutPostInput {
  create: ShortcodeCreateWithoutPostInput!
  where: ShortcodeWhereUniqueInput!
}

input ShortcodeCreateOrConnectWithoutRealmInput {
  create: ShortcodeCreateWithoutRealmInput!
  where: ShortcodeWhereUniqueInput!
}

input ShortcodeCreateOrConnectWithoutUserInput {
  create: ShortcodeCreateWithoutUserInput!
  where: ShortcodeWhereUniqueInput!
}

input ShortcodeCreateWithoutCollectionInput {
  comment: CommentCreateNestedOneWithoutShortcodeInput
  data: JSON
  lore: LoreCreateNestedOneWithoutShortcodeInput
  post: PostCreateNestedOneWithoutShortcodeInput
  realm: RealmCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
  user: UserCreateNestedOneWithoutShortcodeInput
}

input ShortcodeCreateWithoutCommentInput {
  collection: CollectionCreateNestedOneWithoutShortcodeInput
  data: JSON
  lore: LoreCreateNestedOneWithoutShortcodeInput
  post: PostCreateNestedOneWithoutShortcodeInput
  realm: RealmCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
  user: UserCreateNestedOneWithoutShortcodeInput
}

input ShortcodeCreateWithoutLoreInput {
  collection: CollectionCreateNestedOneWithoutShortcodeInput
  comment: CommentCreateNestedOneWithoutShortcodeInput
  data: JSON
  post: PostCreateNestedOneWithoutShortcodeInput
  realm: RealmCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
  user: UserCreateNestedOneWithoutShortcodeInput
}

input ShortcodeCreateWithoutPostInput {
  collection: CollectionCreateNestedOneWithoutShortcodeInput
  comment: CommentCreateNestedOneWithoutShortcodeInput
  data: JSON
  lore: LoreCreateNestedOneWithoutShortcodeInput
  realm: RealmCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
  user: UserCreateNestedOneWithoutShortcodeInput
}

input ShortcodeCreateWithoutRealmInput {
  collection: CollectionCreateNestedOneWithoutShortcodeInput
  comment: CommentCreateNestedOneWithoutShortcodeInput
  data: JSON
  lore: LoreCreateNestedOneWithoutShortcodeInput
  post: PostCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
  user: UserCreateNestedOneWithoutShortcodeInput
}

input ShortcodeCreateWithoutUserInput {
  collection: CollectionCreateNestedOneWithoutShortcodeInput
  comment: CommentCreateNestedOneWithoutShortcodeInput
  data: JSON
  lore: LoreCreateNestedOneWithoutShortcodeInput
  post: PostCreateNestedOneWithoutShortcodeInput
  realm: RealmCreateNestedOneWithoutShortcodeInput
  type: ShortcodeType!
}

type ShortcodeMaxAggregate {
  createdAt: DateTime
  id: String
  type: ShortcodeType
}

type ShortcodeMinAggregate {
  createdAt: DateTime
  id: String
  type: ShortcodeType
}

enum ShortcodeOrderByRelevanceFieldEnum {
  id
}

input ShortcodeOrderByRelevanceInput {
  fields: [ShortcodeOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ShortcodeOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ShortcodeOrderByRelevanceInput
  collection: CollectionOrderByWithRelationAndSearchRelevanceInput
  comment: CommentOrderByWithRelationAndSearchRelevanceInput
  createdAt: SortOrder
  data: SortOrderInput
  id: SortOrder
  lore: LoreOrderByWithRelationAndSearchRelevanceInput
  post: PostOrderByWithRelationAndSearchRelevanceInput
  realm: RealmOrderByWithRelationAndSearchRelevanceInput
  type: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
}

input ShortcodeRelationFilter {
  is: ShortcodeWhereInput
  isNot: ShortcodeWhereInput
}

enum ShortcodeType {
  Collection
  Comment
  InternalLink
  Lore
  Post
  Realm
  User
}

input ShortcodeUpdateInput {
  collection: CollectionUpdateOneWithoutShortcodeNestedInput
  comment: CommentUpdateOneWithoutShortcodeNestedInput
  data: JSON
  lore: LoreUpdateOneWithoutShortcodeNestedInput
  post: PostUpdateOneWithoutShortcodeNestedInput
  realm: RealmUpdateOneWithoutShortcodeNestedInput
  user: UserUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpdateOneWithoutCollectionNestedInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutCollectionInput
  create: ShortcodeCreateWithoutCollectionInput
  delete: Boolean
  disconnect: Boolean
  update: ShortcodeUpdateWithoutCollectionInput
  upsert: ShortcodeUpsertWithoutCollectionInput
}

input ShortcodeUpdateOneWithoutCommentNestedInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutCommentInput
  create: ShortcodeCreateWithoutCommentInput
  delete: Boolean
  disconnect: Boolean
  update: ShortcodeUpdateWithoutCommentInput
  upsert: ShortcodeUpsertWithoutCommentInput
}

input ShortcodeUpdateOneWithoutLoreNestedInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutLoreInput
  create: ShortcodeCreateWithoutLoreInput
  delete: Boolean
  disconnect: Boolean
  update: ShortcodeUpdateWithoutLoreInput
  upsert: ShortcodeUpsertWithoutLoreInput
}

input ShortcodeUpdateOneWithoutPostNestedInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutPostInput
  create: ShortcodeCreateWithoutPostInput
  delete: Boolean
  disconnect: Boolean
  update: ShortcodeUpdateWithoutPostInput
  upsert: ShortcodeUpsertWithoutPostInput
}

input ShortcodeUpdateOneWithoutRealmNestedInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutRealmInput
  create: ShortcodeCreateWithoutRealmInput
  delete: Boolean
  disconnect: Boolean
  update: ShortcodeUpdateWithoutRealmInput
  upsert: ShortcodeUpsertWithoutRealmInput
}

input ShortcodeUpdateOneWithoutUserNestedInput {
  connect: ShortcodeWhereUniqueInput
  connectOrCreate: ShortcodeCreateOrConnectWithoutUserInput
  create: ShortcodeCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ShortcodeUpdateWithoutUserInput
  upsert: ShortcodeUpsertWithoutUserInput
}

input ShortcodeUpdateWithoutCollectionInput {
  comment: CommentUpdateOneWithoutShortcodeNestedInput
  data: JSON
  lore: LoreUpdateOneWithoutShortcodeNestedInput
  post: PostUpdateOneWithoutShortcodeNestedInput
  realm: RealmUpdateOneWithoutShortcodeNestedInput
  user: UserUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpdateWithoutCommentInput {
  collection: CollectionUpdateOneWithoutShortcodeNestedInput
  data: JSON
  lore: LoreUpdateOneWithoutShortcodeNestedInput
  post: PostUpdateOneWithoutShortcodeNestedInput
  realm: RealmUpdateOneWithoutShortcodeNestedInput
  user: UserUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpdateWithoutLoreInput {
  collection: CollectionUpdateOneWithoutShortcodeNestedInput
  comment: CommentUpdateOneWithoutShortcodeNestedInput
  data: JSON
  post: PostUpdateOneWithoutShortcodeNestedInput
  realm: RealmUpdateOneWithoutShortcodeNestedInput
  user: UserUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpdateWithoutPostInput {
  collection: CollectionUpdateOneWithoutShortcodeNestedInput
  comment: CommentUpdateOneWithoutShortcodeNestedInput
  data: JSON
  lore: LoreUpdateOneWithoutShortcodeNestedInput
  realm: RealmUpdateOneWithoutShortcodeNestedInput
  user: UserUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpdateWithoutRealmInput {
  collection: CollectionUpdateOneWithoutShortcodeNestedInput
  comment: CommentUpdateOneWithoutShortcodeNestedInput
  data: JSON
  lore: LoreUpdateOneWithoutShortcodeNestedInput
  post: PostUpdateOneWithoutShortcodeNestedInput
  user: UserUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpdateWithoutUserInput {
  collection: CollectionUpdateOneWithoutShortcodeNestedInput
  comment: CommentUpdateOneWithoutShortcodeNestedInput
  data: JSON
  lore: LoreUpdateOneWithoutShortcodeNestedInput
  post: PostUpdateOneWithoutShortcodeNestedInput
  realm: RealmUpdateOneWithoutShortcodeNestedInput
}

input ShortcodeUpsertWithoutCollectionInput {
  create: ShortcodeCreateWithoutCollectionInput!
  update: ShortcodeUpdateWithoutCollectionInput!
}

input ShortcodeUpsertWithoutCommentInput {
  create: ShortcodeCreateWithoutCommentInput!
  update: ShortcodeUpdateWithoutCommentInput!
}

input ShortcodeUpsertWithoutLoreInput {
  create: ShortcodeCreateWithoutLoreInput!
  update: ShortcodeUpdateWithoutLoreInput!
}

input ShortcodeUpsertWithoutPostInput {
  create: ShortcodeCreateWithoutPostInput!
  update: ShortcodeUpdateWithoutPostInput!
}

input ShortcodeUpsertWithoutRealmInput {
  create: ShortcodeCreateWithoutRealmInput!
  update: ShortcodeUpdateWithoutRealmInput!
}

input ShortcodeUpsertWithoutUserInput {
  create: ShortcodeCreateWithoutUserInput!
  update: ShortcodeUpdateWithoutUserInput!
}

input ShortcodeWhereInput {
  AND: [ShortcodeWhereInput!]
  NOT: [ShortcodeWhereInput!]
  OR: [ShortcodeWhereInput!]
  collection: CollectionRelationFilter
  comment: CommentRelationFilter
  createdAt: DateTimeFilter
  data: JsonNullableFilter
  id: StringFilter
  lore: LoreRelationFilter
  post: PostRelationFilter
  realm: RealmRelationFilter
  type: EnumShortcodeTypeFilter
  user: UserRelationFilter
}

input ShortcodeWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

type User {
  _count: UserCount!
  collections: [Collection!]
  comments: [Comment!]
  followTarget: FollowTarget!
  followTargetId: UUID!
  following: [Follow!]
  id: UUID!
  joinedAt: DateTime!
  likes: [Like!]
  lores: [Lore!]!
  nickname: String
  posts: [Post!]
  profile: UserProfile
  realms: [Realm!]!
  shortcode: Shortcode
  shortcodeId: String
  username: String!
}

type UserAuthCountAggregate {
  _all: Int!
  createdAt: Int!
  data: Int!
  id: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

type UserAuthMaxAggregate {
  createdAt: DateTime
  id: UUID
  type: UserAuthType
  updatedAt: DateTime
  userId: UUID
}

type UserAuthMinAggregate {
  createdAt: DateTime
  id: UUID
  type: UserAuthType
  updatedAt: DateTime
  userId: UUID
}

enum UserAuthType {
  EmailPassword
  Google
  UsernamePassword
}

type UserCount {
  authData: Int!
  collections: Int!
  comments: Int!
  following: Int!
  likes: Int!
  lores: Int!
  posts: Int!
  realms: Int!
}

type UserCountAggregate {
  _all: Int!
  followTargetId: Int!
  id: Int!
  joinedAt: Int!
  nickname: Int!
  shortcodeId: Int!
  username: Int!
}

input UserCreateInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  email: EmailAddress!
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateNestedOneWithoutCollectionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCollectionsInput
  create: UserCreateWithoutCollectionsInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutFollowTargetInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFollowTargetInput
  create: UserCreateWithoutFollowTargetInput
}

input UserCreateNestedOneWithoutLikesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikesInput
  create: UserCreateWithoutLikesInput
}

input UserCreateNestedOneWithoutLoresInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLoresInput
  create: UserCreateWithoutLoresInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateNestedOneWithoutRealmsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRealmsInput
  create: UserCreateWithoutRealmsInput
}

input UserCreateNestedOneWithoutShortcodeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShortcodeInput
  create: UserCreateWithoutShortcodeInput
}

input UserCreateOrConnectWithoutCollectionsInput {
  create: UserCreateWithoutCollectionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowTargetInput {
  create: UserCreateWithoutFollowTargetInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutLoresInput {
  create: UserCreateWithoutLoresInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRealmsInput {
  create: UserCreateWithoutRealmsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutShortcodeInput {
  create: UserCreateWithoutShortcodeInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutCollectionsInput {
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutCommentsInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutFollowTargetInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutLikesInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutLoresInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutPostsInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutRealmsInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  shortcode: ShortcodeCreateNestedOneWithoutUserInput
  username: String!
}

input UserCreateWithoutShortcodeInput {
  collections: CollectionCreateNestedManyWithoutAuthorInput
  comments: CommentCreateNestedManyWithoutAuthorInput
  following: FollowCreateNestedManyWithoutFollowerInput
  likes: LikeCreateNestedManyWithoutUserInput
  lores: LoreCreateNestedManyWithoutAuthorInput
  nickname: String
  posts: PostCreateNestedManyWithoutAuthorInput
  profile: UserProfileCreateNestedOneWithoutUserInput
  realms: RealmCreateNestedManyWithoutAuthorInput
  username: String!
}

type UserMaxAggregate {
  followTargetId: UUID
  id: UUID
  joinedAt: DateTime
  nickname: String
  shortcodeId: String
  username: String
}

type UserMinAggregate {
  followTargetId: UUID
  id: UUID
  joinedAt: DateTime
  nickname: String
  shortcodeId: String
  username: String
}

enum UserOrderByRelevanceFieldEnum {
  followTargetId
  id
  nickname
  shortcodeId
  username
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  _relevance: UserOrderByRelevanceInput
  collections: CollectionOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  followTarget: FollowTargetOrderByWithRelationAndSearchRelevanceInput
  followTargetId: SortOrder
  following: FollowOrderByRelationAggregateInput
  id: SortOrder
  joinedAt: SortOrder
  likes: LikeOrderByRelationAggregateInput
  lores: LoreOrderByRelationAggregateInput
  nickname: SortOrderInput
  posts: PostOrderByRelationAggregateInput
  profile: UserProfileOrderByWithRelationAndSearchRelevanceInput
  realms: RealmOrderByRelationAggregateInput
  shortcode: ShortcodeOrderByWithRelationAndSearchRelevanceInput
  shortcodeId: SortOrderInput
  username: SortOrder
}

type UserProfile {
  avatarUrl: URL
  bannerUrl: URL
  bio: String
  createdAt: DateTime!
  id: UUID!
  location: String
  private: Boolean!
  pronouns: String
  updatedAt: DateTime!
  user: User!
  userId: UUID!
  website: String
}

type UserProfileCountAggregate {
  _all: Int!
  avatarUrl: Int!
  bannerUrl: Int!
  bio: Int!
  createdAt: Int!
  id: Int!
  location: Int!
  private: Int!
  pronouns: Int!
  updatedAt: Int!
  userId: Int!
  website: Int!
}

input UserProfileCreateNestedOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileCreateWithoutUserInput
}

input UserProfileCreateOrConnectWithoutUserInput {
  create: UserProfileCreateWithoutUserInput!
  where: UserProfileWhereUniqueInput!
}

input UserProfileCreateWithoutUserInput {
  avatarUrl: URL
  bannerUrl: URL
  bio: String
  location: String
  private: Boolean
  pronouns: String
  website: String
}

type UserProfileMaxAggregate {
  avatarUrl: URL
  bannerUrl: URL
  bio: String
  createdAt: DateTime
  id: UUID
  location: String
  private: Boolean
  pronouns: String
  updatedAt: DateTime
  userId: UUID
  website: String
}

type UserProfileMinAggregate {
  avatarUrl: URL
  bannerUrl: URL
  bio: String
  createdAt: DateTime
  id: UUID
  location: String
  private: Boolean
  pronouns: String
  updatedAt: DateTime
  userId: UUID
  website: String
}

enum UserProfileOrderByRelevanceFieldEnum {
  avatarUrl
  bannerUrl
  bio
  id
  location
  pronouns
  userId
  website
}

input UserProfileOrderByRelevanceInput {
  fields: [UserProfileOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserProfileOrderByWithRelationAndSearchRelevanceInput {
  _relevance: UserProfileOrderByRelevanceInput
  avatarUrl: SortOrderInput
  bannerUrl: SortOrderInput
  bio: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  location: SortOrderInput
  private: SortOrder
  pronouns: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationAndSearchRelevanceInput
  userId: SortOrder
  website: SortOrderInput
}

input UserProfileRelationFilter {
  is: UserProfileWhereInput
  isNot: UserProfileWhereInput
}

input UserProfileUpdateOneWithoutUserNestedInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserProfileUpdateWithoutUserInput
  upsert: UserProfileUpsertWithoutUserInput
}

input UserProfileUpdateWithoutUserInput {
  avatarUrl: NullableStringFieldUpdateOperationsInput
  bannerUrl: NullableStringFieldUpdateOperationsInput
  bio: NullableStringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  private: BoolFieldUpdateOperationsInput
  pronouns: NullableStringFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
}

input UserProfileUpsertWithoutUserInput {
  create: UserProfileCreateWithoutUserInput!
  update: UserProfileUpdateWithoutUserInput!
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput!]
  NOT: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  avatarUrl: StringNullableFilter
  bannerUrl: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  id: UuidFilter
  location: StringNullableFilter
  private: BoolFilter
  pronouns: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: UuidFilter
  website: StringNullableFilter
}

input UserProfileWhereUniqueInput {
  id: UUID
  userId: UUID
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  followTargetId
  id
  joinedAt
  nickname
  shortcodeId
  username
}

input UserUpdateInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutCollectionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCollectionsInput
  create: UserCreateWithoutCollectionsInput
  update: UserUpdateWithoutCollectionsInput
  upsert: UserUpsertWithoutCollectionsInput
}

input UserUpdateOneRequiredWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutLikesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLikesInput
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesInput
  upsert: UserUpsertWithoutLikesInput
}

input UserUpdateOneRequiredWithoutLoresNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutLoresInput
  create: UserCreateWithoutLoresInput
  update: UserUpdateWithoutLoresInput
  upsert: UserUpsertWithoutLoresInput
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneRequiredWithoutRealmsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRealmsInput
  create: UserCreateWithoutRealmsInput
  update: UserUpdateWithoutRealmsInput
  upsert: UserUpsertWithoutRealmsInput
}

input UserUpdateOneWithoutFollowTargetNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutFollowTargetInput
  create: UserCreateWithoutFollowTargetInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutFollowTargetInput
  upsert: UserUpsertWithoutFollowTargetInput
}

input UserUpdateOneWithoutShortcodeNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShortcodeInput
  create: UserCreateWithoutShortcodeInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutShortcodeInput
  upsert: UserUpsertWithoutShortcodeInput
}

input UserUpdateWithoutCollectionsInput {
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutFollowTargetInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutLikesInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutLoresInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutPostsInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutRealmsInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  shortcode: ShortcodeUpdateOneWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutShortcodeInput {
  collections: CollectionUpdateManyWithoutAuthorNestedInput
  comments: CommentUpdateManyWithoutAuthorNestedInput
  following: FollowUpdateManyWithoutFollowerNestedInput
  likes: LikeUpdateManyWithoutUserNestedInput
  lores: LoreUpdateManyWithoutAuthorNestedInput
  nickname: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  profile: UserProfileUpdateOneWithoutUserNestedInput
  realms: RealmUpdateManyWithoutAuthorNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutCollectionsInput {
  create: UserCreateWithoutCollectionsInput!
  update: UserUpdateWithoutCollectionsInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutFollowTargetInput {
  create: UserCreateWithoutFollowTargetInput!
  update: UserUpdateWithoutFollowTargetInput!
}

input UserUpsertWithoutLikesInput {
  create: UserCreateWithoutLikesInput!
  update: UserUpdateWithoutLikesInput!
}

input UserUpsertWithoutLoresInput {
  create: UserCreateWithoutLoresInput!
  update: UserUpdateWithoutLoresInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserUpsertWithoutRealmsInput {
  create: UserCreateWithoutRealmsInput!
  update: UserUpdateWithoutRealmsInput!
}

input UserUpsertWithoutShortcodeInput {
  create: UserCreateWithoutShortcodeInput!
  update: UserUpdateWithoutShortcodeInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  collections: CollectionListRelationFilter
  comments: CommentListRelationFilter
  followTarget: FollowTargetRelationFilter
  followTargetId: UuidFilter
  following: FollowListRelationFilter
  id: UuidFilter
  joinedAt: DateTimeFilter
  likes: LikeListRelationFilter
  lores: LoreListRelationFilter
  nickname: StringNullableFilter
  posts: PostListRelationFilter
  profile: UserProfileRelationFilter
  realms: RealmListRelationFilter
  shortcode: ShortcodeRelationFilter
  shortcodeId: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  followTargetId: UUID
  id: UUID
  shortcodeId: String
  username: String
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String!]
  search: String
}

input UuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidNullableFilter
  notIn: [String!]
  search: String
}